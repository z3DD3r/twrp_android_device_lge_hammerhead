#!/sbin/sh
#
# Made for Hammerhead
#

PARTITION_SYSTEM_START=0
PARTITION_SYSTEM_END=0
PARTITION_VENDOR_START=0
PARTITION_VENDOR_END=0
PARTITION_CRYPTO_START=0
PARTITION_CRYPTO_END=0
PARTITION_CACHE_START=0
PARTITION_CACHE_END=0
PARTITION_USERDATA_START=0
PARTITION_USERDATA_END=0
PARTITION_GROW_START=0
PARTITION_GROW_END=0

#
# Function will print usage instruction
#
print_usage_instruction()
{
echo " ";
echo "Dump info about partitions to /sdcard/partitions.log :";
echo "hh_repart -d";
echo " ";
echo "Modify size of partitions :";
echo "hh_repart -m";
echo " ";
echo "Restore size of partitions :";
echo "hh_repart -r";
echo " ";

return 0
}


#
# Function will dump info about current partitions to /sdcard/partitions.log
#
dump_partitions_size()
{
echo "Dumping info about partitions...";
parted /dev/block/mmcblk0 unit b p quit -> /sdcard/partitions.log

echo "-- Finished --";
return 0
}


#
# Function will check current partitions
# Returns 3 values:
#    0 - Original partitions layout with 1.0Gb system
#    1 - Modified partitions layout with 2.0Gb system
#  255 - Unknown partitions layout. Modification SHOULD NOT be performed!
#
check_partitions_size()
{
echo "Checking size of partitions...";
parted /dev/block/mmcblk0 unit b p quit -> /tmp/part

PARTITION_GROW_START=$(grep grow /tmp/part | tr -s ' ' | cut -d ' ' -f 2)
PARTITION_GROW_END=$(grep grow /tmp/part | tr -s ' ' | cut -d ' ' -f 3)
PARTITION_GROW_IDX=$(grep grow /tmp/part | tr -s ' ' | cut -d ' ' -f 1)

if [[ "${PARTITION_GROW_START}" == "15757977600B" && "${PARTITION_GROW_END}" == "15757983231B" ]]; then
  PARTITION_USERDATA_END=15757977599B
elif [[ "${PARTITION_GROW_START}" == "31268513792B" && "${PARTITION_GROW_END}" == "31268519423B" ]]; then
  PARTITION_USERDATA_END=31268513791B
else
  rm /tmp/part
  return 255
fi

if [[ ${PARTITION_GROW_IDX} -eq 29 ]]; then
  PARTITION_SYSTEM_START=192937984B
  PARTITION_SYSTEM_END=2340421631B
  PARTITION_VENDOR_START=2340421632B
  PARTITION_VENDOR_END=2877292543B
  PARTITION_CRYPTO_START=2877292544B
  PARTITION_CRYPTO_END=2908749823B
  PARTITION_CACHE_START=2908749824B
  PARTITION_CACHE_END=3642753023B
  PARTITION_USERDATA_START=3642753024B
  rm /tmp/part
  return 0
elif [[ ${PARTITION_GROW_IDX} -eq 30 ]]; then
  PARTITION_SYSTEM_START=192937984B
  PARTITION_SYSTEM_END=1266679807B
  PARTITION_VENDOR_START=0
  PARTITION_VENDOR_END=0
  PARTITION_CRYPTO_START=1266679808B
  PARTITION_CRYPTO_END=1298137087B
  PARTITION_CACHE_START=1298137088B
  PARTITION_CACHE_END=2032140287B
  PARTITION_USERDATA_START=2032140288B
  rm /tmp/part
  return 1
else
  rm /tmp/part
  return 255
fi
}

#
# Functions used to work with partitions
#
partition_mounted() {
mount | grep -q " $1 ";
}

partition_umount() {
umount $1 >> /dev/null 2>&1 || umount -f $1 >> /dev/null 2>&1
}

partitions_umount() {
local list="$*"

local partition
for partition in $list; do
  partition_umount $partition
done

return 0
}

partitions_valid() {
local list="$*"

local partition
for partition in $list; do
  partition_mounted $partition && return 1
done

return 0
}


#
# Function will modify size of partitions
# /system partition will be increased to 2.0Gb
# /vendor partition will be added with 512Mb size
#
modify_partitions_size()
{
echo " ";
echo "Modifying partitions...";

partitions_umount /sdcard /data /cache /system
partitions_valid /sdcard /data /cache /system
if [ $? -ne 0 ]; then
  echo "Error: Not all partitions unmounted!"
  return 1
fi

mkdir -p /tmp/backup
dd if=/dev/block/mmcblk0p26 of=/tmp/backup/crypto.img
dd if=/dev/block/mmcblk0p29 of=/tmp/backup/grow.img

parted /dev/block/mmcblk0 <<EOF
  rm 25
  rm 26
  rm 27
  rm 28
  rm 29
  mkpart primary ${PARTITION_SYSTEM_START} ${PARTITION_SYSTEM_END}
  name 25 system
  mkpart primary ${PARTITION_VENDOR_START} ${PARTITION_VENDOR_END}
  name 26 vendor
  mkpart extended ${PARTITION_CRYPTO_START} ${PARTITION_CRYPTO_END}
  name 27 crypto
  mkpart primary ${PARTITION_CACHE_START} ${PARTITION_CACHE_END}
  name 28 cache
  mkpart primary ${PARTITION_USERDATA_START} ${PARTITION_USERDATA_END}
  name 29 userdata
  mkpart primary ${PARTITION_GROW_START} ${PARTITION_GROW_END}
  name 30 grow
  quit
EOF

sleep 5

yes | mke2fs -t ext4 /dev/block/mmcblk0p25
yes | mke2fs -t ext4 /dev/block/mmcblk0p26
yes | mke2fs -t ext4 /dev/block/mmcblk0p28
yes | mke2fs -t ext4 /dev/block/mmcblk0p29

e2fsck -p -f /dev/block/mmcblk0p25
e2fsck -p -f /dev/block/mmcblk0p26
e2fsck -p -f /dev/block/mmcblk0p28
e2fsck -p -f /dev/block/mmcblk0p29

dd if=/tmp/backup/crypto.img of=/dev/block/mmcblk0p27
dd if=/tmp/backup/grow.img of=/dev/block/mmcblk0p30
rm -rf /tmp/backup/

echo "-- Finished --";
reboot recovery
return 0
}


#
# Function will restore size of partitions to stock setup
#
restore_partitions_size()
{
echo " ";
echo "Restoring partitions...";

partitions_umount /sdcard /data /cache /system /vendor
partitions_valid /sdcard /data /cache /system /vendor
if [ $? -ne 0 ]; then
  echo "Error: Not all partitions unmounted!"
  return 1
fi

mkdir -p /tmp/backup
dd if=/dev/block/mmcblk0p27 of=/tmp/backup/crypto.img
dd if=/dev/block/mmcblk0p30 of=/tmp/backup/grow.img

parted /dev/block/mmcblk0 <<EOF
  rm 25
  rm 26
  rm 27
  rm 28
  rm 29
  rm 30
  mkpart primary ${PARTITION_SYSTEM_START} ${PARTITION_SYSTEM_END}
  name 25 system
  mkpart extended ${PARTITION_CRYPTO_START} ${PARTITION_CRYPTO_END}
  name 26 crypto
  mkpart primary ${PARTITION_CACHE_START} ${PARTITION_CACHE_END}
  name 27 cache
  mkpart primary ${PARTITION_USERDATA_START} ${PARTITION_USERDATA_END}
  name 28 userdata
  mkpart primary ${PARTITION_GROW_START} ${PARTITION_GROW_END}
  name 29 grow
  quit
EOF

sleep 5

yes | mke2fs -t ext4 /dev/block/mmcblk0p25
yes | mke2fs -t ext4 /dev/block/mmcblk0p27
yes | mke2fs -t ext4 /dev/block/mmcblk0p28

e2fsck -p -f /dev/block/mmcblk0p25
e2fsck -p -f /dev/block/mmcblk0p27
e2fsck -p -f /dev/block/mmcblk0p28

dd if=/tmp/backup/crypto.img of=/dev/block/mmcblk0p26
dd if=/tmp/backup/grow.img of=/dev/block/mmcblk0p29
rm -rf /tmp/backup/

echo "-- Finished --";
reboot recovery
return 0
}


if [ -z "$1" ]; then
  print_usage_instruction
  exit 0
fi

if [ "$1" == "-d" ]; then
  dump_partitions_size
  exit 0
fi

if [ "$1" == "-m" ]; then
  check_partitions_size
  if [ $? -eq 0 ]; then
    echo "Original partitions. Let's go on!";
    modify_partitions_size
  elif [ $? -eq 1 ]; then
    echo "Modified partitions. No need to modify twice :)";
    echo " ";
  else
    echo "Unknown partitions. We can't handle that :(";
    echo " ";
  fi
  exit 0
fi

if [ "$1" == "-r" ]; then
  check_partitions_size
  if [ $? -eq 0 ]; then
    echo "Original partitions. No need to restore twice :)";
    echo " ";
  elif [ $? -eq 1 ]; then
    echo "Modified partitions. Let's go on!";
    restore_partitions_size
  else
    echo "Unknown partitions. We can't handle that :(";
    echo " ";
  fi
  exit 0
fi

print_usage_instruction
exit 0
